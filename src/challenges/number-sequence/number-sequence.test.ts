// Here is a sequence:

// 1. '1', first number is 1
// 2. '11', since previous number has One(1) 1
// 3. '21', since previous number has Two(2) 1s
// 4. '1211', since previous number has One(1) 2 and One(1) 1
// 5. '111221', since previous number has One(1) 1, One(1) 2, Two(2) 1s
// 6. '312211', since previous number has Three(3) 1s, Two(2) 2s, One(1) 1
// ....
// As explained above, the sequence is generated by counting the digits of previous number.

// Please create getNthNum(n) to return the n-th number string in the sequence, n starts from 1.

import { numberSequenceV1 as numberSequence } from './number-sequence'

describe('number sequence', () => {
    const testParams = [
        [1, '1'],
        [2, '11'],
        [3, '21'],
        [4, '1211'],
        [5, '111221'],
        [6, '312211']
    ] as const
    test.each(testParams)('cases', (iteration, result) => {
        expect(numberSequence(iteration)).toEqual(result)
    })
})